knitr::opts_chunk$set(echo = TRUE)
# Clear the memory.
rm(list=ls())
# Load libraries.
library(ggplot2)
library(dplyr)
library(readr)
# Load the data set "balance.csv" and assign it to
# an object named "balance".
balance<-read_csv("balance.csv")
# Clear the memory.
rm(list=ls())
# Load libraries.
library(ggplot2)
library(dplyr)
library(readr)
# Load the data set "balance.csv" and assign it to
# an object named "balance".
balance<-read_csv("balance.csv")
glimpse(balance)
mode(balance)   # Show the data type
names(balance)   # Show column names
head(balance)   # Show first 6 rows of data
dim(balance)   # Show number of rows and columns
str(balance)   # Show structure of data set
tail(balance)   # Show last 6 rows of data
glimpse(balance)   # Shows a horizontal view of the data
as_tibble(balance)  # Shows a vertical view of the data
by_group<-balance %>% group_by(group)
sumData <- balance %>%
summarise(
countMVT = n(),   # Number of individuals
meanMVT = mean(movement),   # Mean
medianMVT = median(movement),   # Median
varMVT = var(movement),   # Variance
sdevMVT = sd(movement),   # Standard deviation
semMVT = sd(movement)/sqrt(n()),   # Standard error of the mean (SEM)
iqrMVT = IQR(movement),   # Interquartile range
quant_25_MVT = quantile(movement, 0.25),   # First quartile
quant_50_MVT = quantile(movement, 0.50),   # The median
quant_75_MVT = quantile(movement, 0.75),   # Third quartile
minMVT = min(movement),  # Minimum
maxMVT = max(movement))   # Maximum
View(by_group)
by_group<-balance %>% group_by(Young)
by_group<-balance %>% group_by(group)
sumData <- balance %>%
summarise(
countMVT = n(),   # Number of individuals
meanMVT = mean(Young),   # Mean
medianMVT = median(Young),   # Median
varMVT = var(Young),   # Variance
sdevMVT = sd(Young),   # Standard deviation
semMVT = sd(Young)/sqrt(n()),   # Standard error of the mean (SEM)
iqrMVT = IQR(Young),   # Interquartile range
quant_25_MVT = quantile(Young, 0.25),   # First quartile
quant_50_MVT = quantile(Young, 0.50),   # The median
quant_75_MVT = quantile(Young, 0.75),   # Third quartile
minMVT = min(Young),  # Minimum
maxMVT = max(Young))   # Maximum
by_group<-balance %>% group_by(group)
View(by_group)
View(balance)
View(by_group)
by_group<-balance %>% group_by(group)
sumData <- by_group %>%
summarise(
countMVT = n(),   # Number of individuals
meanMVT = mean(group),   # Mean
medianMVT = median(group),   # Median
varMVT = var(group),   # Variance
sdevMVT = sd(group),   # Standard deviation
semMVT = sd(group)/sqrt(n()),   # Standard error of the mean (SEM)
iqrMVT = IQR(group),   # Interquartile range
quant_25_MVT = quantile(group, 0.25),   # First quartile
quant_50_MVT = quantile(group, 0.50),   # The median
quant_75_MVT = quantile(group, 0.75),   # Third quartile
minMVT = min(group),  # Minimum
maxMVT = max(group))   # Maximum
by_group<-balance %>% group_by(group)
sumDataElderly <- by_group %>%
summarise(
countMVT = n(),   # Number of individuals
meanMVT = mean(Elderly),   # Mean
medianMVT = median(Elderly),   # Median
varMVT = var(Elderly),   # Variance
sdevMVT = sd(Elderly),   # Standard deviation
semMVT = sd(Elderly)/sqrt(n()),   # Standard error of the mean (SEM)
iqrMVT = IQR(Elderly),   # Interquartile range
quant_25_MVT = quantile(Elderly, 0.25),   # First quartile
quant_50_MVT = quantile(Elderly, 0.50),   # The median
quant_75_MVT = quantile(Elderly, 0.75),   # Third quartile
minMVT = min(Elderly),  # Minimum
maxMVT = max(Elderly))   # Maximum
View(sumData)
knitr::opts_chunk$set(echo = TRUE)
# Clear the memory.
rm(list=ls())
# Load libraries.
library(ggplot2)
library(dplyr)
library(readr)
# Load the data set "balance.csv" and assign it to
# an object named "balance".
balance<-read_csv("balance.csv")
glimpse(balance)
mode(balance)   # Show the data type
names(balance)   # Show column names
head(balance)   # Show first 6 rows of data
dim(balance)   # Show number of rows and columns
str(balance)   # Show structure of data set
tail(balance)   # Show last 6 rows of data
glimpse(balance)   # Shows a horizontal view of the data
as_tibble(balance)  # Shows a vertical view of the data
sumData <- balance %>% group_by(group) %>%
summarise(
count = n(),   # Number of individuals
mean = mean(movement),   # Mean
median = median(movement),   # Median
var = var(movement),   # Variance
sdev = sd(movement),   # Standard deviation
sem = sd(movement)/sqrt(n()),   # Standard error of the mean (SEM)
iqr = IQR(movement),   # Interquartile range
quant_25 = quantile(movement, 0.25),   # First quartile
quant_50 = quantile(movement, 0.50),   # The median
quant_75 = quantile(movement, 0.75),   # Third quartile
minMVT = min(movement),  # Minimum
maxMVT = max(movement))   # Maximum
View(sumData)
View(sumData)
sumData <- balance %>% group_by(group) %>%
summarise(
count = n(),   # Number of individuals
mean = mean(movement),   # Mean
median = median(movement),   # Median
var = var(movement),   # Variance
sdev = sd(movement),   # Standard deviation
sem = sd(movement)/sqrt(n()),   # Standard error of the mean (SEM)
CV = sd(movement)/mean(movement),
iqr = IQR(movement),   # Interquartile range
quant_25 = quantile(movement, 0.25),   # First quartile
quant_50 = quantile(movement, 0.50),   # The median
quant_75 = quantile(movement, 0.75),   # Third quartile
minMVT = min(movement),  # Minimum
maxMVT = max(movement))   # Maximum
View(sumData)
View(balance)
View(sumData)
bin <- 10   # Set the number of bins
bw <- 2   # Set the binwidth
print(movement_histogram <-
ggplot(data = balance, aes(x=movement)) +
geom_histogram(bins = bin, binwidth = bw) +
scale_x_continuous(name = "Movement"))
bin <- 10   # Set the number of bins
bw <- 2   # Set the binwidth
print(movement_histogram <-
ggplot(data = balance %>% group_by(group), aes(x=movement)) +
geom_histogram(bins = bin, binwidth = bw) +
scale_x_continuous(name = "Movement"))
View(movement_histogram)
ggplot(balance, aes(x=movement, fill=group))+ geom_histogram(bins=10, bindwidth=2, alpha=0.7)
ggplot(balance, aes(x=movement, fill=group))+ geom_histogram(bins=10, binwidth=2, alpha=0.7)
ggplot(balance, aes(x=movement, fill=group))+ geom_histogram(bins=10, binwidth=2, alpha=0.7)+ facet_wrap(~ group, ncol=1)+ labs(x= Movement, y= Count, title= "Histogram of Movement by Age Group")
ggplot(balance, aes(x=movement, fill=group))+ geom_histogram(bins=10, binwidth=2, alpha=0.7)+ facet_wrap(~ group, ncol=1)+ labs(x= Movement, y= Count)
ggplot(balance, aes(x=movement, fill=group))+ geom_histogram(bins=10, binwidth=2, alpha=0.7)+ facet_wrap(~ group, ncol=1)+ labs(x= movement, y= Count)
ggplot(balance,aes(x=movement))+
geom_histogram(data=subset(balance,group=="Elderly"), bins=10, binwidth=2, fill="lightgreen",alpha=0.7)+geom_histogram(data=subset(balance,group=="Young"), bins=10, binwidth=2, fill="red",alpha=0.7)+ facet_grid(age_group ~.,scales="free",space="free")+ labs(x= "Movement", y="Frequency")
ggplot(balance,aes(x=movement))+
geom_histogram(data=subset(balance,group=="Elderly"), bins=10, binwidth=2, fill="lightgreen",alpha=0.7)+geom_histogram(data=subset(balance,group=="Young"), bins=10, binwidth=2, fill="red",alpha=0.7)+ facet_grid(group ~.,scales="free",space="free")+ labs(x= "Movement", y="Frequency")
View(sumData)
ggplot(balance,aes(x=movement))+
geom_histogram(data=subset(balance,group=="Elderly"), bins=10, binwidth=2, fill="lightgreen",alpha=0.7)+geom_histogram(data=subset(balance,group=="Young"), bins=10, binwidth=2, fill="red",alpha=0.7)+ facet_grid(group ~.,scales="free",space="free")+ labs(x= "Movement (square millimeters)", y="Frequency")
is_outlier <- function(x) {
return(x < quantile(x,0.25) - 1.5 * IQR(x) |
x > quantile(x, 0.73) + 1.5 * IQR(x))
}
balance %>%
group_by(group) %>%
mutate(outlier = ifelse(is_outlier(movement), movement, as.numeric(NA))) %>%
ggplot(., aes(x = factor(group), y = movement)) +
geom_boxplot() +
geom_text(aes(label = outlier), na.rm = TRUE, hjust = -0.3)+
geom_point(size = 4, colour = 'lightgrey', alpha = 0.5) +
xlab("Age Group") +
ylab("Movement (square mm)") +
theme_bw()
balance$outlier <- ifelse(is_outlier(balance$movement), balance$movement, as.numeric(NA))
print(balance, n=nrow(balance))
View(is_outlier)
# Get help on "var.test()".
?var.test()
# Get help on "var.test()".
?var.test()
# Perform the equality of variance test.
var.test(movement~group,data=balance)
knitr::opts_chunk$set(echo = TRUE)
par(mfrow = c(1, 2))
qqnorm(ozone[["Ozone"]][ozone$Garden.location == "East"],
main = "East Location")
